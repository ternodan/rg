package com.yourplugin.rGG.listeners;

import org.bukkit.event.EventHandler;
import org.bukkit.event.Listener;
import org.bukkit.event.block.BlockPlaceEvent;
import org.bukkit.entity.Player;
import org.bukkit.inventory.ItemStack;
import org.bukkit.inventory.meta.ItemMeta;
import org.bukkit.Location;
import org.bukkit.ChatColor;
import org.bukkit.World;
import org.bukkit.block.Block;

import com.yourplugin.rGG.RGProtectPlugin;

import java.util.List;
import java.util.UUID;

public class BlockPlaceListener implements Listener {

    private final RGProtectPlugin plugin;

    public BlockPlaceListener(RGProtectPlugin plugin) {
        this.plugin = plugin;
    }

    @EventHandler
    public void onBlockPlace(BlockPlaceEvent event) {
        Player player = event.getPlayer();
        ItemStack item = event.getItemInHand();
        Block block = event.getBlockPlaced();

        if (!isProtectBlock(item)) {
            return;
        }

        String targetPlayer = getTargetPlayerFromItem(item);
        if (targetPlayer == null) {
            player.sendMessage(ChatColor.RED + "–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –≤–ª–∞–¥–µ–ª—å—Ü–∞!");
            event.setCancelled(true);
            return;
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –Ω–∞ —Ä–∞–∑–º–µ—â–µ–Ω–∏–µ
        if (!player.hasPermission("rgprotect.place") && !player.getName().equals(targetPlayer)) {
            player.sendMessage(ChatColor.RED + "–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ —Ä–∞–∑–º–µ—â–∞—Ç—å –ø—Ä–∏–≤–∞—Ç—ã –¥–ª—è –¥—Ä—É–≥–∏—Ö –∏–≥—Ä–æ–∫–æ–≤!");
            event.setCancelled(true);
            return;
        }

        Location location = block.getLocation();

        // –£–õ–£–ß–®–ï–ù–ù–ê–Ø –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å –¥–µ—Ç–∞–ª—å–Ω–æ–π –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–æ–π
        if (!plugin.getProtectRegionManager().canCreateRegion(location, targetPlayer)) {
            handleRegionCreationFailure(player, location, targetPlayer);
            event.setCancelled(true);
            return;
        }

        // –°–æ–∑–¥–∞–µ–º —Ä–µ–≥–∏–æ–Ω
        String regionName = plugin.getProtectRegionManager().createRegion(location, targetPlayer);
        if (regionName == null) {
            player.sendMessage(ChatColor.RED + "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ä–µ–≥–∏–æ–Ω–∞!");
            event.setCancelled(true);
            return;
        }

        // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –°–æ–∑–¥–∞–µ–º –≥–æ–ª–æ–≥—Ä–∞–º–º—É –ü–û–°–õ–ï —É—Å–ø–µ—à–Ω–æ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è —Ä–µ–≥–∏–æ–Ω–∞
        Location hologramLocation = location.clone().add(0.5, 1.5, 0.5);
        plugin.getHologramManager().createHologram(hologramLocation, targetPlayer, regionName);

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≥–æ–ª–æ–≥—Ä–∞–º–º–µ –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ—Å–ª–µ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏
        plugin.getHologramManager().saveHologramData(regionName, hologramLocation, targetPlayer);

        // –ù–û–í–û–ï: –°–æ–∑–¥–∞–µ–º —Ç–∞–π–º–µ—Ä –¥–ª—è —Ä–µ–≥–∏–æ–Ω–∞ –µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–æ
        if (plugin.getConfig().getBoolean("region-timer.enabled", true)) {
            plugin.getRegionTimerManager().createRegionTimer(regionName, targetPlayer);

            int initialMinutes = plugin.getConfig().getInt("region-timer.initial-lifetime-minutes", 5);
            String timerMessage = plugin.getConfig().getString("messages.region-timer-created",
                    "&e–í—Ä–µ–º—è –∂–∏–∑–Ω–∏ —Ä–µ–≥–∏–æ–Ω–∞: &f{time} –º–∏–Ω—É—Ç. &7–ù–µ –∑–∞–±—É–¥—å—Ç–µ –ø—Ä–æ–¥–ª–∏—Ç—å!");
            timerMessage = timerMessage.replace("{time}", String.valueOf(initialMinutes));
            player.sendMessage(ChatColor.translateAlternateColorCodes('&', timerMessage));
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫—É –ø–æ–¥—Å–≤–µ—Ç–∫–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        boolean bordersEnabledByDefault = plugin.getConfig().getBoolean("region-creation.borders-enabled-by-default", true);

        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–¥—Å–≤–µ—Ç–∫–∏ –¥–ª—è –Ω–æ–≤–æ–≥–æ —Ä–µ–≥–∏–æ–Ω–∞
        plugin.getRegionMenuManager().setRegionBordersEnabled(regionName, bordersEnabledByDefault);

        if (plugin.getConfig().getBoolean("debug.log-border-creation", false)) {
            plugin.getLogger().info("DEBUG: –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–¥—Å–≤–µ—Ç–∫–∏ –¥–ª—è –Ω–æ–≤–æ–≥–æ —Ä–µ–≥–∏–æ–Ω–∞ " + regionName + ": " + bordersEnabledByDefault);
        }

        // –°–æ–∑–¥–∞–µ–º —Ñ–∏–∑–∏—á–µ—Å–∫–∏–µ –≥—Ä–∞–Ω–∏—Ü—ã –¢–û–õ–¨–ö–û –µ—Å–ª–∏ –ø–æ–¥—Å–≤–µ—Ç–∫–∞ –≤–∫–ª—é—á–µ–Ω–∞
        if (bordersEnabledByDefault) {
            com.sk89q.worldguard.protection.regions.ProtectedRegion createdRegion = plugin.getProtectRegionManager().getRegionAt(location);
            if (createdRegion != null) {
                plugin.getVisualizationManager().showCreatedRegionVisualization(player, createdRegion);

                // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞
                String createMessage = plugin.getConfig().getString("messages.region-created", "&a–ü—Ä–∏–≤–∞—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!");
                String borderMessage = plugin.getConfig().getString("messages.region-borders-created", "&7–ì—Ä–∞–Ω–∏—Ü—ã —Ä–µ–≥–∏–æ–Ω–∞ –æ—Ç–º–µ—á–µ–Ω—ã &c–∫—Ä–∞—Å–Ω–æ–π —à–µ—Ä—Å—Ç—å—é&7 –ø–æ –≤–µ—Ä—Ö–Ω–µ–º—É –ø–µ—Ä–∏–º–µ—Ç—Ä—É.");

                player.sendMessage(ChatColor.translateAlternateColorCodes('&', createMessage.replace("{player}", targetPlayer)));
                player.sendMessage(ChatColor.translateAlternateColorCodes('&', borderMessage));

                // –ò–Ω—Ñ–æ—Ä–º–∏—Ä—É–µ–º –æ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –æ—Ç–∫–ª—é—á–µ–Ω–∏—è
                String toggleHint = plugin.getConfig().getString("messages.borders-toggle-hint",
                        "&7–°–æ–≤–µ—Ç: –í—ã –º–æ–∂–µ—Ç–µ –≤–∫–ª—é—á–∏—Ç—å/–≤—ã–∫–ª—é—á–∏—Ç—å –ø–æ–¥—Å–≤–µ—Ç–∫—É –≥—Ä–∞–Ω–∏—Ü —á–µ—Ä–µ–∑ –º–µ–Ω—é —Ä–µ–≥–∏–æ–Ω–∞ (–ü–ö–ú –ø–æ —Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω–æ–º—É –±–ª–æ–∫—É).");
                player.sendMessage(ChatColor.translateAlternateColorCodes('&', toggleHint));
            } else {
                player.sendMessage(ChatColor.RED + "–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Å–æ–∑–¥–∞–Ω–Ω—ã–π —Ä–µ–≥–∏–æ–Ω!");
                event.setCancelled(true);
                return;
            }
        } else {
            // –ü–æ–¥—Å–≤–µ—Ç–∫–∞ –≤—ã–∫–ª—é—á–µ–Ω–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            String createMessage = plugin.getConfig().getString("messages.region-created", "&a–ü—Ä–∏–≤–∞—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!");
            String noBordersMessage = plugin.getConfig().getString("messages.region-created-no-borders",
                    "&7–ü–æ–¥—Å–≤–µ—Ç–∫–∞ –≥—Ä–∞–Ω–∏—Ü –æ—Ç–∫–ª—é—á–µ–Ω–∞. –í—ã –º–æ–∂–µ—Ç–µ –≤–∫–ª—é—á–∏—Ç—å –µ—ë —á–µ—Ä–µ–∑ –º–µ–Ω—é —Ä–µ–≥–∏–æ–Ω–∞.");

            player.sendMessage(ChatColor.translateAlternateColorCodes('&', createMessage.replace("{player}", targetPlayer)));
            player.sendMessage(ChatColor.translateAlternateColorCodes('&', noBordersMessage));
        }

        // –õ–æ–≥–∏—Ä—É–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ
        plugin.getLogger().info("–ò–≥—Ä–æ–∫ " + player.getName() + " —Å–æ–∑–¥–∞–ª –ø—Ä–∏–≤–∞—Ç –¥–ª—è " + targetPlayer + " –≤ " +
                location.getWorld().getName() + " " + location.getBlockX() + " " +
                location.getBlockY() + " " + location.getBlockZ());

        if (bordersEnabledByDefault) {
            plugin.getLogger().info("–°–æ–∑–¥–∞–Ω—ã –≥—Ä–∞–Ω–∏—Ü—ã –∏–∑ –∫—Ä–∞—Å–Ω–æ–π —à–µ—Ä—Å—Ç–∏ –¥–ª—è —Ä–µ–≥–∏–æ–Ω–∞ " + regionName);
        } else {
            plugin.getLogger().info("–†–µ–≥–∏–æ–Ω " + regionName + " —Å–æ–∑–¥–∞–Ω –±–µ–∑ –ø–æ–¥—Å–≤–µ—Ç–∫–∏ –≥—Ä–∞–Ω–∏—Ü (–≤—ã–∫–ª—é—á–µ–Ω–æ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)");
        }

        if (plugin.getConfig().getBoolean("region-timer.enabled", true)) {
            plugin.getLogger().info("–°–æ–∑–¥–∞–Ω —Ç–∞–π–º–µ—Ä –¥–ª—è —Ä–µ–≥–∏–æ–Ω–∞ " + regionName);
        }

        plugin.getLogger().info("–°–æ–∑–¥–∞–Ω–∞ –≥–æ–ª–æ–≥—Ä–∞–º–º–∞ –¥–ª—è —Ä–µ–≥–∏–æ–Ω–∞ " + regionName + " –≤ –ø–æ–∑–∏—Ü–∏–∏ " + hologramLocation);
    }

    /**
     * –ù–û–í–´–ô –º–µ—Ç–æ–¥ –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–π –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –ø—Ä–æ–±–ª–µ–º —Å–æ–∑–¥–∞–Ω–∏—è —Ä–µ–≥–∏–æ–Ω–∞
     */
    private void handleRegionCreationFailure(Player player, Location location, String targetPlayer) {
        World world = location.getWorld();

        // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç —Ä–µ–≥–∏–æ–Ω–æ–≤
        int maxRegions = plugin.getConfig().getInt("limits.max-regions-per-player", 5);
        int playerRegions = plugin.getProtectRegionManager().getPlayerRegionCount(world, targetPlayer);

        if (playerRegions >= maxRegions) {
            player.sendMessage("");
            player.sendMessage(ChatColor.RED + "‚ùå –î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç –ø—Ä–∏–≤–∞—Ç–æ–≤!");
            player.sendMessage(ChatColor.YELLOW + "–£ –∏–≥—Ä–æ–∫–∞ " + ChatColor.WHITE + targetPlayer +
                    ChatColor.YELLOW + ": " + ChatColor.WHITE + playerRegions + "/" + maxRegions +
                    ChatColor.YELLOW + " —Ä–µ–≥–∏–æ–Ω–æ–≤");
            player.sendMessage(ChatColor.GRAY + "üí° –£–¥–∞–ª–∏—Ç–µ –Ω–µ–Ω—É–∂–Ω—ã–µ –ø—Ä–∏–≤–∞—Ç—ã –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É");
            player.sendMessage("");
            return;
        }

        // –ï—Å–ª–∏ –ª–∏–º–∏—Ç –Ω–µ –¥–æ—Å—Ç–∏–≥–Ω—É—Ç, –∑–Ω–∞—á–∏—Ç –ø—Ä–æ–±–ª–µ–º–∞ –≤ –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏–∏
        analyzeRegionCollisions(player, location, targetPlayer);
    }

    /**
     * –ù–û–í–´–ô –º–µ—Ç–æ–¥ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏–π —Å –ø–æ–¥—Ä–æ–±–Ω—ã–º–∏ —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏
     */
    private void analyzeRegionCollisions(Player player, Location location, String targetPlayer) {
        World world = location.getWorld();
        Object regionManager = plugin.getProtectRegionManager().getWorldGuardRegionManager(world);

        if (regionManager == null) {
            player.sendMessage(ChatColor.RED + "–û—à–∏–±–∫–∞: WorldGuard –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –¥–ª—è —ç—Ç–æ–≥–æ –º–∏—Ä–∞!");
            return;
        }

        // –í—ã—á–∏—Å–ª—è–µ–º –≥—Ä–∞–Ω–∏—Ü—ã –ø–ª–∞–Ω–∏—Ä—É–µ–º–æ–≥–æ —Ä–µ–≥–∏–æ–Ω–∞
        int sizeX = plugin.getConfig().getInt("region.size.x", 3);
        int sizeY = plugin.getConfig().getInt("region.size.y", 3);
        int sizeZ = plugin.getConfig().getInt("region.size.z", 3);

        int centerX = location.getBlockX();
        int centerY = location.getBlockY();
        int centerZ = location.getBlockZ();

        player.sendMessage("");
        player.sendMessage(ChatColor.RED + "‚ùå –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ —Å–æ–∑–¥–∞—Ç—å –ø—Ä–∏–≤–∞—Ç!");
        player.sendMessage(ChatColor.YELLOW + "–ü—Ä–∏—á–∏–Ω–∞: " + ChatColor.WHITE + "–ü–µ—Ä–µ—Å–µ—á–µ–Ω–∏–µ —Å –¥—Ä—É–≥–∏–º–∏ —Ä–µ–≥–∏–æ–Ω–∞–º–∏");
        player.sendMessage("");
        player.sendMessage(ChatColor.GRAY + "üìç –ü–æ–∑–∏—Ü–∏—è: " + centerX + ", " + centerY + ", " + centerZ);
        player.sendMessage(ChatColor.GRAY + "üìè –†–∞–∑–º–µ—Ä: " + sizeX + "x" + sizeY + "x" + sizeZ + " –±–ª–æ–∫–æ–≤");
        player.sendMessage("");

        // –ò—â–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –ø–µ—Ä–µ—Å–µ–∫–∞—é—â–∏–µ—Å—è —Ä–µ–≥–∏–æ–Ω—ã
        try {
            java.lang.reflect.Method getRegionsMethod = regionManager.getClass().getMethod("getRegions");
            @SuppressWarnings("unchecked")
            java.util.Map<String, com.sk89q.worldguard.protection.regions.ProtectedRegion> regions =
                    (java.util.Map<String, com.sk89q.worldguard.protection.regions.ProtectedRegion>)
                            getRegionsMethod.invoke(regionManager);

            // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π —Ä–µ–≥–∏–æ–Ω
            int radiusX = (sizeX - 1) / 2;
            int radiusY = (sizeY - 1) / 2;
            int radiusZ = (sizeZ - 1) / 2;

            com.sk89q.worldedit.math.BlockVector3 min = com.sk89q.worldedit.math.BlockVector3.at(
                    centerX - radiusX, centerY - radiusY, centerZ - radiusZ);
            com.sk89q.worldedit.math.BlockVector3 max = com.sk89q.worldedit.math.BlockVector3.at(
                    centerX + radiusX, centerY + radiusY, centerZ + radiusZ);

            com.sk89q.worldguard.protection.regions.ProtectedCuboidRegion testRegion =
                    new com.sk89q.worldguard.protection.regions.ProtectedCuboidRegion("test", min, max);

            java.util.List<String> conflictingRegions = new java.util.ArrayList<>();
            java.util.List<String> conflictingOwners = new java.util.ArrayList<>();

            for (com.sk89q.worldguard.protection.regions.ProtectedRegion existingRegion : regions.values()) {
                if (hasRegionIntersection(testRegion, existingRegion)) {
                    String ownerName = getRegionOwnerName(existingRegion);

                    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —Å–≤–æ–π –ª–∏ —ç—Ç–æ —Ä–µ–≥–∏–æ–Ω
                    if (!isPlayerOwner(existingRegion, targetPlayer)) {
                        conflictingRegions.add(existingRegion.getId());
                        if (!conflictingOwners.contains(ownerName)) {
                            conflictingOwners.add(ownerName);
                        }
                    }
                }
            }

            if (!conflictingOwners.isEmpty()) {
                player.sendMessage(ChatColor.RED + "üö´ –ü–µ—Ä–µ—Å–µ—á–µ–Ω–∏–µ —Å —Ä–µ–≥–∏–æ–Ω–∞–º–∏ –∏–≥—Ä–æ–∫–æ–≤:");
                for (String owner : conflictingOwners) {
                    player.sendMessage(ChatColor.RED + "   ‚Ä¢ " + ChatColor.WHITE + owner);
                }
                player.sendMessage("");

                if (plugin.getConfig().getBoolean("debug.show-region-details", false)) {
                    player.sendMessage(ChatColor.GRAY + "üîç –ö–æ–Ω—Ñ–ª–∏–∫—Ç—É—é—â–∏–µ —Ä–µ–≥–∏–æ–Ω—ã:");
                    for (String regionId : conflictingRegions) {
                        player.sendMessage(ChatColor.GRAY + "   ‚Ä¢ " + regionId);
                    }
                    player.sendMessage("");
                }

                player.sendMessage(ChatColor.YELLOW + "üí° –°–æ–≤–µ—Ç—ã:");
                player.sendMessage(ChatColor.GRAY + "   ‚Ä¢ –í—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–µ –º–µ—Å—Ç–æ");
                player.sendMessage(ChatColor.GRAY + "   ‚Ä¢ –û—Ç–æ–π–¥–∏—Ç–µ –ø–æ–¥–∞–ª—å—à–µ –æ—Ç —á—É–∂–∏—Ö –ø—Ä–∏–≤–∞—Ç–æ–≤");
                player.sendMessage(ChatColor.GRAY + "   ‚Ä¢ –î–æ–≥–æ–≤–æ—Ä–∏—Ç–µ—Å—å —Å —Å–æ—Å–µ–¥—è–º–∏ –æ –≥—Ä–∞–Ω–∏—Ü–∞—Ö");

                // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –±–ª–∏–∂–∞–π—à–µ–µ —Å–≤–æ–±–æ–¥–Ω–æ–µ –º–µ—Å—Ç–æ
                String direction = findBestDirection(player, location, testRegion, regions);
                if (direction != null) {
                    player.sendMessage(ChatColor.GRAY + "   ‚Ä¢ –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ–º–µ—Å—Ç–∏—Ç—å—Å—è " + direction);
                }
            } else {
                player.sendMessage(ChatColor.YELLOW + "–ü–µ—Ä–µ—Å–µ—á–µ–Ω–∏–µ —Å —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–º–∏ —Ä–µ–≥–∏–æ–Ω–∞–º–∏ - —Ä–∞–∑—Ä–µ—à–µ–Ω–æ");
            }

        } catch (Exception e) {
            player.sendMessage(ChatColor.RED + "–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏–π: " + e.getMessage());
            plugin.getLogger().severe("–û—à–∏–±–∫–∞ –≤ analyzeRegionCollisions: " + e.getMessage());
        }

        player.sendMessage("");
    }

    /**
     * –ù–û–í–´–ô –º–µ—Ç–æ–¥ –¥–ª—è –ø–æ–∏—Å–∫–∞ –ª—É—á—à–µ–≥–æ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–ª—è —Ä–∞–∑–º–µ—â–µ–Ω–∏—è
     */
    private String findBestDirection(Player player, Location location,
                                     com.sk89q.worldguard.protection.regions.ProtectedCuboidRegion testRegion,
                                     java.util.Map<String, com.sk89q.worldguard.protection.regions.ProtectedRegion> regions) {

        int sizeX = plugin.getConfig().getInt("region.size.x", 3);
        int sizeZ = plugin.getConfig().getInt("region.size.z", 3);
        int distance = Math.max(sizeX, sizeZ) + 2; // –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ + –±—É—Ñ–µ—Ä

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º 4 –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        String[] directions = {"–Ω–∞ —Å–µ–≤–µ—Ä", "–Ω–∞ —é–≥", "–Ω–∞ –∑–∞–ø–∞–¥", "–Ω–∞ –≤–æ—Å—Ç–æ–∫"};
        int[][] offsets = {{0, -distance}, {0, distance}, {-distance, 0}, {distance, 0}};

        for (int i = 0; i < directions.length; i++) {
            Location testLoc = location.clone().add(offsets[i][0], 0, offsets[i][1]);

            if (wouldRegionFitAt(testLoc, regions)) {
                return directions[i] + " (" + Math.abs(offsets[i][0] + offsets[i][1]) + " –±–ª–æ–∫–æ–≤)";
            }
        }

        return null;
    }

    /**
     * –ù–û–í–´–ô –º–µ—Ç–æ–¥ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏, –ø–æ–º–µ—Å—Ç–∏—Ç—Å—è –ª–∏ —Ä–µ–≥–∏–æ–Ω –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–º –º–µ—Å—Ç–µ
     */
    private boolean wouldRegionFitAt(Location location,
                                     java.util.Map<String, com.sk89q.worldguard.protection.regions.ProtectedRegion> regions) {
        try {
            int sizeX = plugin.getConfig().getInt("region.size.x", 3);
            int sizeY = plugin.getConfig().getInt("region.size.y", 3);
            int sizeZ = plugin.getConfig().getInt("region.size.z", 3);

            int centerX = location.getBlockX();
            int centerY = location.getBlockY();
            int centerZ = location.getBlockZ();

            int radiusX = (sizeX - 1) / 2;
            int radiusY = (sizeY - 1) / 2;
            int radiusZ = (sizeZ - 1) / 2;

            com.sk89q.worldedit.math.BlockVector3 min = com.sk89q.worldedit.math.BlockVector3.at(
                    centerX - radiusX, centerY - radiusY, centerZ - radiusZ);
            com.sk89q.worldedit.math.BlockVector3 max = com.sk89q.worldedit.math.BlockVector3.at(
                    centerX + radiusX, centerY + radiusY, centerZ + radiusZ);

            com.sk89q.worldguard.protection.regions.ProtectedCuboidRegion testRegion =
                    new com.sk89q.worldguard.protection.regions.ProtectedCuboidRegion("test", min, max);

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏—è
            for (com.sk89q.worldguard.protection.regions.ProtectedRegion existingRegion : regions.values()) {
                if (hasRegionIntersection(testRegion, existingRegion)) {
                    return false;
                }
            }

            return true;
        } catch (Exception e) {
            return false;
        }
    }

    /**
     * –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –º–µ—Ç–æ–¥—ã –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏–π –∏ –≤–ª–∞–¥–µ–ª—å—Ü–µ–≤
     */
    private boolean hasRegionIntersection(com.sk89q.worldguard.protection.regions.ProtectedRegion region1,
                                          com.sk89q.worldguard.protection.regions.ProtectedRegion region2) {
        com.sk89q.worldedit.math.BlockVector3 min1 = region1.getMinimumPoint();
        com.sk89q.worldedit.math.BlockVector3 max1 = region1.getMaximumPoint();
        com.sk89q.worldedit.math.BlockVector3 min2 = region2.getMinimumPoint();
        com.sk89q.worldedit.math.BlockVector3 max2 = region2.getMaximumPoint();

        return !(max1.x() < min2.x() || min1.x() > max2.x() ||
                max1.y() < min2.y() || min1.y() > max2.y() ||
                max1.z() < min2.z() || min1.z() > max2.z());
    }

    private String getRegionOwnerName(com.sk89q.worldguard.protection.regions.ProtectedRegion region) {
        if (!region.getOwners().getUniqueIds().isEmpty()) {
            UUID ownerUUID = region.getOwners().getUniqueIds().iterator().next();
            String ownerName = plugin.getServer().getOfflinePlayer(ownerUUID).getName();
            return ownerName != null ? ownerName : "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ";
        }
        if (!region.getOwners().getPlayers().isEmpty()) {
            return region.getOwners().getPlayers().iterator().next();
        }
        return "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ";
    }

    private boolean isPlayerOwner(com.sk89q.worldguard.protection.regions.ProtectedRegion region, String playerName) {
        UUID playerUUID = getPlayerUUID(playerName);
        if (playerUUID == null) {
            return false;
        }
        return region.getOwners().contains(playerUUID) || region.getOwners().contains(playerName);
    }

    private UUID getPlayerUUID(String playerName) {
        try {
            Player onlinePlayer = plugin.getServer().getPlayer(playerName);
            if (onlinePlayer != null) {
                return onlinePlayer.getUniqueId();
            } else {
                return plugin.getServer().getOfflinePlayer(playerName).getUniqueId();
            }
        } catch (Exception e) {
            return null;
        }
    }

    /**
     * –û–†–ò–ì–ò–ù–ê–õ–¨–ù–´–ï –º–µ—Ç–æ–¥—ã –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–ª–æ–∫–∞ –ø—Ä–∏–≤–∞—Ç–∞
     */
    private boolean isProtectBlock(ItemStack item) {
        if (item == null || !item.hasItemMeta()) {
            return false;
        }

        ItemMeta meta = item.getItemMeta();
        if (!meta.hasLore()) {
            return false;
        }

        List<String> lore = meta.getLore();
        for (String line : lore) {
            if (line.startsWith(ChatColor.DARK_GRAY + "RGProtect:")) {
                return true;
            }
        }

        return false;
    }

    private String getTargetPlayerFromItem(ItemStack item) {
        if (!item.hasItemMeta()) {
            return null;
        }

        ItemMeta meta = item.getItemMeta();
        if (!meta.hasLore()) {
            return null;
        }

        List<String> lore = meta.getLore();
        for (String line : lore) {
            if (line.startsWith(ChatColor.DARK_GRAY + "RGProtect:")) {
                return line.substring((ChatColor.DARK_GRAY + "RGProtect:").length());
            }
        }

        return null;
    }
}
package com.yourplugin.rGG.managers;

import org.bukkit.Bukkit;
import org.bukkit.Material;
import org.bukkit.entity.Player;
import org.bukkit.inventory.Inventory;
import org.bukkit.inventory.ItemStack;
import org.bukkit.inventory.meta.ItemMeta;
import org.bukkit.ChatColor;

import com.sk89q.worldguard.protection.regions.ProtectedRegion;
import com.yourplugin.rGG.RGProtectPlugin;

import java.util.*;

public class FlagProtectionMenu {

    private final RGProtectPlugin plugin;
    private final Map<UUID, String> openFlagMenus;
    // –î–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–æ–∫—É–ø–∫–∏ —Ñ–ª–∞–≥–æ–≤
    private final Map<UUID, FlagPurchaseData> pendingFlagPurchases;

    public FlagProtectionMenu(RGProtectPlugin plugin) {
        this.plugin = plugin;
        this.openFlagMenus = new HashMap<>();
        this.pendingFlagPurchases = new HashMap<>();
    }

    /**
     * –ö–ª–∞—Å—Å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ–∫—É–ø–∫–µ —Ñ–ª–∞–≥–∞
     */
    public static class FlagPurchaseData {
        public String regionId;
        public String flagName;
        public long durationSeconds;
        public double cost;
        public long expirationTime; // –í—Ä–µ–º—è –∏—Å—Ç–µ—á–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞

        public FlagPurchaseData(String regionId, String flagName, long durationSeconds, double cost) {
            this.regionId = regionId;
            this.flagName = flagName;
            this.durationSeconds = durationSeconds;
            this.cost = cost;
            this.expirationTime = System.currentTimeMillis() + 15000; // 15 —Å–µ–∫—É–Ω–¥
        }
    }

    /**
     * –û—Ç–∫—Ä—ã–≤–∞–µ—Ç –º–µ–Ω—é –∑–∞—â–∏—Ç—ã —Ä–µ–≥–∏–æ–Ω–∞
     */
    public void openFlagProtectionMenu(Player player, ProtectedRegion region) {
        String regionId = region.getId();

        // –°–æ–∑–¥–∞–µ–º –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å
        String title = ChatColor.translateAlternateColorCodes('&',
                plugin.getConfig().getString("flag-protection-menu.title", "&6&l–ó–∞—â–∏—Ç–∞ —Ä–µ–≥–∏–æ–Ω–∞"));
        int size = plugin.getConfig().getInt("flag-protection-menu.size", 54);

        Inventory menu = Bukkit.createInventory(null, size, title);

        // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—É—é –∫–Ω–æ–ø–∫—É
        addInfoButton(menu, region);

        // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ —Ñ–ª–∞–≥–æ–≤ –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞
        addFlagButtons(menu, player, region);

        // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –≤–æ–∑–≤—Ä–∞—Ç–∞
        addBackButton(menu);

        // –î–æ–±–∞–≤–ª—è–µ–º –¥–µ–∫–æ—Ä–∞—Ç–∏–≤–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã
        if (plugin.getConfig().getBoolean("flag-protection-menu.items.filler.enabled", true)) {
            addFillerItems(menu);
        }

        // –û—Ç–∫—Ä—ã–≤–∞–µ–º –º–µ–Ω—é
        player.openInventory(menu);
        openFlagMenus.put(player.getUniqueId(), regionId);

        plugin.getLogger().info("–ò–≥—Ä–æ–∫ " + player.getName() + " –æ—Ç–∫—Ä—ã–ª –º–µ–Ω—é –∑–∞—â–∏—Ç—ã —Ä–µ–≥–∏–æ–Ω–∞ " + regionId);
    }

    /**
     * –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–π –∫–Ω–æ–ø–∫–∏
     */
    private void addInfoButton(Inventory menu, ProtectedRegion region) {
        int slot = plugin.getConfig().getInt("flag-protection-menu.items.info.slot", 4);
        String materialName = plugin.getConfig().getString("flag-protection-menu.items.info.material", "SHIELD");

        Material material;
        try {
            material = Material.valueOf(materialName);
        } catch (IllegalArgumentException e) {
            material = Material.SHIELD;
        }

        ItemStack item = new ItemStack(material);
        ItemMeta meta = item.getItemMeta();

        String name = plugin.getConfig().getString("flag-protection-menu.items.info.name", "&b&l–ó–∞—â–∏—Ç–∞ —Ä–µ–≥–∏–æ–Ω–∞");
        meta.setDisplayName(ChatColor.translateAlternateColorCodes('&', name));

        List<String> lore = new ArrayList<>();
        List<String> configLore = plugin.getConfig().getStringList("flag-protection-menu.items.info.lore");

        for (String line : configLore) {
            String processedLine = line.replace("{region}", region.getId());
            lore.add(ChatColor.translateAlternateColorCodes('&', processedLine));
        }

        meta.setLore(lore);
        item.setItemMeta(meta);
        menu.setItem(slot, item);
    }

    /**
     * –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–Ω–æ–ø–æ–∫ —Ñ–ª–∞–≥–æ–≤
     */
    private void addFlagButtons(Inventory menu, Player player, ProtectedRegion region) {
        String regionId = region.getId();

        if (!plugin.getConfig().contains("flag-protection.flags")) {
            plugin.getLogger().warning("–§–ª–∞–≥–∏ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã –≤ –∫–æ–Ω—Ñ–∏–≥–µ!");
            return;
        }

        // –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–Ω–æ–ø–∫–∏ —Ñ–ª–∞–≥–æ–≤ –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞
        for (String flagKey : plugin.getConfig().getConfigurationSection("flag-protection.flags").getKeys(false)) {
            String path = "flag-protection.flags." + flagKey;

            int slot = plugin.getConfig().getInt(path + ".slot");
            String materialName = plugin.getConfig().getString(path + ".material", "BARRIER");
            String flagName = plugin.getConfig().getString(path + ".name", flagKey);
            List<String> lore = plugin.getConfig().getStringList(path + ".lore");
            double pricePerHour = plugin.getConfig().getDouble(path + ".price-per-hour", 1000.0);

            Material material;
            try {
                material = Material.valueOf(materialName);
            } catch (IllegalArgumentException e) {
                material = Material.BARRIER;
            }

            ItemStack item = new ItemStack(material);
            ItemMeta meta = item.getItemMeta();

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å —Ñ–ª–∞–≥–∞
            boolean isActive = plugin.getFlagProtectionManager().isFlagActive(regionId, flagKey);
            String remainingTime = plugin.getFlagProtectionManager().getFormattedRemainingTime(regionId, flagKey);

            // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ
            String displayName = flagName;
            if (isActive) {
                displayName = ChatColor.GREEN + "‚úÖ " + flagName + " (–ê–∫—Ç–∏–≤–µ–Ω)";
            } else {
                displayName = ChatColor.GRAY + "‚ùå " + flagName + " (–ù–µ–∞–∫—Ç–∏–≤–µ–Ω)";
            }
            meta.setDisplayName(displayName);

            // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ
            List<String> formattedLore = new ArrayList<>();
            for (String line : lore) {
                String formattedLine = line
                        .replace("{price}", formatPrice(pricePerHour))
                        .replace("{status}", isActive ? "–ê–∫—Ç–∏–≤–µ–Ω" : "–ù–µ–∞–∫—Ç–∏–≤–µ–Ω")
                        .replace("{remaining_time}", isActive ? remainingTime : "");
                formattedLore.add(ChatColor.translateAlternateColorCodes('&', formattedLine));
            }

            if (isActive) {
                formattedLore.add("");
                formattedLore.add(ChatColor.GREEN + "‚è∞ –û—Å—Ç–∞–ª–æ—Å—å: " + remainingTime);
                formattedLore.add("");
                formattedLore.add(ChatColor.YELLOW + "–ù–∞–∂–º–∏—Ç–µ –¥–ª—è –ø—Ä–æ–¥–ª–µ–Ω–∏—è!");
            } else {
                formattedLore.add("");
                formattedLore.add(ChatColor.GRAY + "üí∞ –¶–µ–Ω–∞: " + formatPrice(pricePerHour) + "/—á–∞—Å");
                formattedLore.add(ChatColor.GRAY + "‚è± –ú–∏–Ω–∏–º—É–º: 5 –º–∏–Ω—É—Ç");
                formattedLore.add("");
                formattedLore.add(ChatColor.YELLOW + "–ù–∞–∂–º–∏—Ç–µ –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏!");
            }

            meta.setLore(formattedLore);
            item.setItemMeta(meta);
            menu.setItem(slot, item);
        }
    }

    /**
     * –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ –≤–æ–∑–≤—Ä–∞—Ç–∞
     */
    private void addBackButton(Inventory menu) {
        int slot = plugin.getConfig().getInt("flag-protection-menu.items.back.slot", 49);
        String materialName = plugin.getConfig().getString("flag-protection-menu.items.back.material", "ARROW");

        Material material;
        try {
            material = Material.valueOf(materialName);
        } catch (IllegalArgumentException e) {
            material = Material.ARROW;
        }

        ItemStack item = new ItemStack(material);
        ItemMeta meta = item.getItemMeta();

        String name = plugin.getConfig().getString("flag-protection-menu.items.back.name", "&c&l–ù–∞–∑–∞–¥");
        meta.setDisplayName(ChatColor.translateAlternateColorCodes('&', name));

        List<String> lore = new ArrayList<>();
        List<String> configLore = plugin.getConfig().getStringList("flag-protection-menu.items.back.lore");

        for (String line : configLore) {
            lore.add(ChatColor.translateAlternateColorCodes('&', line));
        }

        meta.setLore(lore);
        item.setItemMeta(meta);
        menu.setItem(slot, item);
    }

    /**
     * –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –¥–µ–∫–æ—Ä–∞—Ç–∏–≤–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
     */
    private void addFillerItems(Inventory menu) {
        String materialName = plugin.getConfig().getString("flag-protection-menu.items.filler.material", "BLACK_STAINED_GLASS_PANE");
        String name = plugin.getConfig().getString("flag-protection-menu.items.filler.name", "&r");
        List<Integer> slots = plugin.getConfig().getIntegerList("flag-protection-menu.items.filler.slots");

        Material material;
        try {
            material = Material.valueOf(materialName);
        } catch (IllegalArgumentException e) {
            material = Material.BLACK_STAINED_GLASS_PANE;
        }

        ItemStack filler = new ItemStack(material);
        ItemMeta meta = filler.getItemMeta();
        meta.setDisplayName(ChatColor.translateAlternateColorCodes('&', name));
        filler.setItemMeta(meta);

        for (int slot : slots) {
            if (slot >= 0 && slot < menu.getSize()) {
                menu.setItem(slot, filler);
            }
        }
    }

    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–ª–∏–∫–∞ –≤ –º–µ–Ω—é
     */
    public boolean handleMenuClick(Player player, int slot, ItemStack clickedItem) {
        String regionId = openFlagMenus.get(player.getUniqueId());
        if (regionId == null) {
            return false;
        }

        // –ù–∞—Ö–æ–¥–∏–º —Ä–µ–≥–∏–æ–Ω
        ProtectedRegion region = findRegionById(regionId);
        if (region == null) {
            player.sendMessage(ChatColor.RED + "–†–µ–≥–∏–æ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω!");
            player.closeInventory();
            return true;
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–ª–æ—Ç –∫–Ω–æ–ø–∫–∏ –≤–æ–∑–≤—Ä–∞—Ç–∞
        int backSlot = plugin.getConfig().getInt("flag-protection-menu.items.back.slot", 49);
        if (slot == backSlot) {
            // –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –æ—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é
            player.closeInventory();
            plugin.getRegionMenuManager().openRegionMenu(player, region);
            return true;
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–ª–æ—Ç—ã –∫–Ω–æ–ø–æ–∫ —Ñ–ª–∞–≥–æ–≤
        if (plugin.getConfig().contains("flag-protection.flags")) {
            for (String flagKey : plugin.getConfig().getConfigurationSection("flag-protection.flags").getKeys(false)) {
                String path = "flag-protection.flags." + flagKey;
                int buttonSlot = plugin.getConfig().getInt(path + ".slot");

                if (slot == buttonSlot) {
                    handleFlagClick(player, region, flagKey);
                    return true;
                }
            }
        }

        return true; // –ë–ª–æ–∫–∏—Ä—É–µ–º –≤—Å–µ –∫–ª–∏–∫–∏ –≤ –º–µ–Ω—é
    }

    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–ª–∏–∫–∞ –ø–æ —Ñ–ª–∞–≥—É
     */
    private void handleFlagClick(Player player, ProtectedRegion region, String flagKey) {
        String regionId = region.getId();
        String flagName = plugin.getConfig().getString("flag-protection.flags." + flagKey + ".name", flagKey);

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞
        if (!canPlayerManageFlags(player, region)) {
            player.sendMessage(ChatColor.RED + "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ñ–ª–∞–≥–∞–º–∏ —ç—Ç–æ–≥–æ —Ä–µ–≥–∏–æ–Ω–∞!");
            return;
        }

        player.closeInventory();

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ –≤–≤–æ–¥—É –≤—Ä–µ–º–µ–Ω–∏
        player.sendMessage("");
        player.sendMessage(ChatColor.GOLD + "=== –ê–†–ï–ù–î–ê –§–õ–ê–ì–ê ===");
        player.sendMessage(ChatColor.YELLOW + "–§–ª–∞–≥: " + ChatColor.WHITE + flagName);
        player.sendMessage("");
        player.sendMessage(ChatColor.GREEN + "–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –∞—Ä–µ–Ω–¥—ã –≤ —á–∞—Ç:");
        player.sendMessage(ChatColor.GRAY + "–§–æ—Ä–º–∞—Ç: 1—á3–º2—Å (1 —á–∞—Å 3 –º–∏–Ω—É—Ç—ã 2 —Å–µ–∫—É–Ω–¥—ã)");
        player.sendMessage(ChatColor.GRAY + "–ü—Ä–∏–º–µ—Ä—ã: 1—á, 30–º, 1—á30–º, 2—á15–º30—Å");
        player.sendMessage("");
        player.sendMessage(ChatColor.YELLOW + "–ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è: " + ChatColor.WHITE + "5 –º–∏–Ω—É—Ç");

        double pricePerHour = plugin.getConfig().getDouble("flag-protection.flags." + flagKey + ".price-per-hour", 1000.0);
        player.sendMessage(ChatColor.YELLOW + "–¶–µ–Ω–∞: " + ChatColor.WHITE + formatPrice(pricePerHour) + " –∑–∞ —á–∞—Å");
        player.sendMessage("");
        player.sendMessage(ChatColor.GRAY + "–£ –≤–∞—Å –µ—Å—Ç—å 30 —Å–µ–∫—É–Ω–¥ –¥–ª—è –≤–≤–æ–¥–∞ –≤—Ä–µ–º–µ–Ω–∏.");

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤ —á–∞—Ç–µ
        FlagPurchaseData purchaseData = new FlagPurchaseData(regionId, flagKey, 0, 0);
        purchaseData.expirationTime = System.currentTimeMillis() + 30000; // 30 —Å–µ–∫—É–Ω–¥ –Ω–∞ –≤–≤–æ–¥ –≤—Ä–µ–º–µ–Ω–∏
        pendingFlagPurchases.put(player.getUniqueId(), purchaseData);

        plugin.getLogger().info("–ò–≥—Ä–æ–∫ " + player.getName() + " –Ω–∞—á–∞–ª –ø—Ä–æ—Ü–µ—Å—Å –ø–æ–∫—É–ø–∫–∏ —Ñ–ª–∞–≥–∞ " + flagKey);
    }

    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —á–∞—Ç–µ –¥–ª—è –ø–æ–∫—É–ø–∫–∏ —Ñ–ª–∞–≥–∞
     */
    public boolean handleFlagPurchaseChat(Player player, String message) {
        FlagPurchaseData purchaseData = pendingFlagPurchases.get(player.getUniqueId());
        if (purchaseData == null) {
            return false;
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∞–π–º–∞—É—Ç
        if (System.currentTimeMillis() > purchaseData.expirationTime) {
            pendingFlagPurchases.remove(player.getUniqueId());
            player.sendMessage(ChatColor.RED + "‚è∞ –í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –∏—Å—Ç–µ–∫–ª–æ. –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.");
            return true;
        }

        message = message.trim();

        // –≠—Ç–∞–ø 1: –í–≤–æ–¥ –≤—Ä–µ–º–µ–Ω–∏
        if (purchaseData.durationSeconds == 0) {
            return handleTimeInput(player, message, purchaseData);
        }
        // –≠—Ç–∞–ø 2: –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ–∫—É–ø–∫–∏
        else {
            return handlePurchaseConfirmation(player, message, purchaseData);
        }
    }

    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –≤—Ä–µ–º–µ–Ω–∏
     */
    private boolean handleTimeInput(Player player, String message, FlagPurchaseData purchaseData) {
        long durationSeconds = plugin.getFlagProtectionManager().parseTimeString(message);

        if (durationSeconds == -1) {
            player.sendMessage(ChatColor.RED + "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏!");
            player.sendMessage(ChatColor.YELLOW + "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑. –ü—Ä–∏–º–µ—Ä: 1—á30–º");
            player.sendMessage(ChatColor.GRAY + "–ú–∏–Ω–∏–º—É–º: 5 –º–∏–Ω—É—Ç (5–º)");
            return true;
        }

        // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ç–æ–∏–º–æ—Å—Ç—å
        double cost = plugin.getFlagProtectionManager().calculateFlagCost(purchaseData.flagName, durationSeconds);
        String timeFormatted = plugin.getFlagProtectionManager().formatTime(durationSeconds);
        String flagDisplayName = plugin.getConfig().getString("flag-protection.flags." + purchaseData.flagName + ".name", purchaseData.flagName);

        // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–∫—É–ø–∫–∏
        purchaseData.durationSeconds = durationSeconds;
        purchaseData.cost = cost;
        purchaseData.expirationTime = System.currentTimeMillis() + 15000; // 15 —Å–µ–∫—É–Ω–¥ –Ω–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
        player.sendMessage("");
        player.sendMessage(ChatColor.GOLD + "=== –ü–û–î–¢–í–ï–†–ñ–î–ï–ù–ò–ï –ü–û–ö–£–ü–ö–ò ===");
        player.sendMessage(ChatColor.YELLOW + "–§–ª–∞–≥: " + ChatColor.WHITE + flagDisplayName);
        player.sendMessage(ChatColor.YELLOW + "–í—Ä–µ–º—è –∞—Ä–µ–Ω–¥—ã: " + ChatColor.WHITE + timeFormatted);
        player.sendMessage(ChatColor.YELLOW + "–°—Ç–æ–∏–º–æ—Å—Ç—å: " + ChatColor.WHITE + formatPrice(cost) + " –º–æ–Ω–µ—Ç");
        player.sendMessage("");

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å
        if (plugin.getEconomy() != null) {
            double balance = plugin.getEconomy().getBalance(player);
            if (balance < cost) {
                player.sendMessage(ChatColor.RED + "‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–µ–Ω–µ–≥!");
                player.sendMessage(ChatColor.YELLOW + "–£ –≤–∞—Å: " + ChatColor.WHITE + formatPrice(balance) + " –º–æ–Ω–µ—Ç");
                player.sendMessage(ChatColor.YELLOW + "–ù—É–∂–Ω–æ: " + ChatColor.WHITE + formatPrice(cost) + " –º–æ–Ω–µ—Ç");
                pendingFlagPurchases.remove(player.getUniqueId());
                return true;
            }
        }

        player.sendMessage(ChatColor.GREEN + "–°–æ–≥–ª–∞—Å–Ω—ã –Ω–∞ –ø–æ–∫—É–ø–∫—É?");
        player.sendMessage(ChatColor.WHITE + "–î–ê" + ChatColor.GRAY + " - –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –ø–æ–∫—É–ø–∫—É");
        player.sendMessage(ChatColor.WHITE + "–ù–ï–¢" + ChatColor.GRAY + " - –æ—Ç–º–µ–Ω–∏—Ç—å –ø–æ–∫—É–ø–∫—É");
        player.sendMessage("");
        player.sendMessage(ChatColor.GRAY + "–£ –≤–∞—Å –µ—Å—Ç—å 15 —Å–µ–∫—É–Ω–¥ –¥–ª—è –æ—Ç–≤–µ—Ç–∞.");

        return true;
    }

    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø–æ–∫—É–ø–∫–∏
     */
    private boolean handlePurchaseConfirmation(Player player, String message, FlagPurchaseData purchaseData) {
        String cleanMessage = message.trim().toUpperCase();

        if (cleanMessage.equals("–î–ê") || cleanMessage.equals("YES") || cleanMessage.equals("Y")) {
            return processFlagPurchase(player, purchaseData);
        } else if (cleanMessage.equals("–ù–ï–¢") || cleanMessage.equals("NO") || cleanMessage.equals("N")) {
            player.sendMessage(ChatColor.YELLOW + "–ü–æ–∫—É–ø–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.");
            pendingFlagPurchases.remove(player.getUniqueId());
            return true;
        } else {
            player.sendMessage(ChatColor.RED + "–ù–∞–ø–∏—à–∏—Ç–µ –î–ê –∏–ª–∏ –ù–ï–¢ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.");
            return true;
        }
    }

    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–∫—É–ø–∫–∏ —Ñ–ª–∞–≥–∞
     */
    private boolean processFlagPurchase(Player player, FlagPurchaseData purchaseData) {
        try {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —ç–∫–æ–Ω–æ–º–∏–∫—É
            if (plugin.getEconomy() == null) {
                player.sendMessage(ChatColor.RED + "–≠–∫–æ–Ω–æ–º–∏–∫–∞ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞!");
                pendingFlagPurchases.remove(player.getUniqueId());
                return true;
            }

            // –°–ø–∏—Å—ã–≤–∞–µ–º –¥–µ–Ω—å–≥–∏
            net.milkbowl.vault.economy.EconomyResponse response = plugin.getEconomy().withdrawPlayer(player, purchaseData.cost);
            if (!response.transactionSuccess()) {
                player.sendMessage(ChatColor.RED + "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–ø–∏—Å–∞–Ω–∏–∏ –¥–µ–Ω–µ–≥: " + response.errorMessage);
                pendingFlagPurchases.remove(player.getUniqueId());
                return true;
            }

            // –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º —Ñ–ª–∞–≥
            boolean success = plugin.getFlagProtectionManager().activateFlag(
                    purchaseData.regionId,
                    purchaseData.flagName,
                    purchaseData.durationSeconds,
                    player.getName()
            );

            if (success) {
                String flagDisplayName = plugin.getConfig().getString("flag-protection.flags." + purchaseData.flagName + ".name", purchaseData.flagName);
                String timeFormatted = plugin.getFlagProtectionManager().formatTime(purchaseData.durationSeconds);

                player.sendMessage("");
                player.sendMessage(ChatColor.GREEN + "‚úÖ –§–ª–∞–≥ —É—Å–ø–µ—à–Ω–æ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω!");
                player.sendMessage(ChatColor.YELLOW + "–§–ª–∞–≥: " + ChatColor.WHITE + flagDisplayName);
                player.sendMessage(ChatColor.YELLOW + "–í—Ä–µ–º—è: " + ChatColor.WHITE + timeFormatted);
                player.sendMessage(ChatColor.YELLOW + "–°–ø–∏—Å–∞–Ω–æ: " + ChatColor.WHITE + formatPrice(purchaseData.cost) + " –º–æ–Ω–µ—Ç");
                player.sendMessage("");

                // –ó–≤—É–∫–æ–≤–æ–π —ç—Ñ—Ñ–µ–∫—Ç
                player.playSound(player.getLocation(), org.bukkit.Sound.ENTITY_EXPERIENCE_ORB_PICKUP, 1.0f, 1.0f);

                plugin.getLogger().info("–ò–≥—Ä–æ–∫ " + player.getName() + " –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–ª —Ñ–ª–∞–≥ " + purchaseData.flagName +
                        " –¥–ª—è —Ä–µ–≥–∏–æ–Ω–∞ " + purchaseData.regionId + " –Ω–∞ " + timeFormatted);
            } else {
                // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –¥–µ–Ω—å–≥–∏ –ø—Ä–∏ –æ—à–∏–±–∫–µ
                plugin.getEconomy().depositPlayer(player, purchaseData.cost);
                player.sendMessage(ChatColor.RED + "–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ —Ñ–ª–∞–≥–∞!");
                player.sendMessage(ChatColor.YELLOW + "–î–µ–Ω—å–≥–∏ –≤–æ–∑–≤—Ä–∞—â–µ–Ω—ã: " + formatPrice(purchaseData.cost) + " –º–æ–Ω–µ—Ç");
            }

            pendingFlagPurchases.remove(player.getUniqueId());
            return true;

        } catch (Exception e) {
            plugin.getLogger().severe("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫—É–ø–∫–µ —Ñ–ª–∞–≥–∞: " + e.getMessage());
            e.printStackTrace();

            // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –¥–µ–Ω—å–≥–∏ –ø—Ä–∏ –æ—à–∏–±–∫–µ
            if (plugin.getEconomy() != null) {
                plugin.getEconomy().depositPlayer(player, purchaseData.cost);
            }

            player.sendMessage(ChatColor.RED + "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫—É–ø–∫–µ —Ñ–ª–∞–≥–∞!");
            pendingFlagPurchases.remove(player.getUniqueId());
            return true;
        }
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∞–π–º–∞—É—Ç–æ–≤ –ø–æ–∫—É–ø–æ–∫
     */
    public void checkPurchaseTimeouts() {
        long currentTime = System.currentTimeMillis();
        Iterator<Map.Entry<UUID, FlagPurchaseData>> iterator = pendingFlagPurchases.entrySet().iterator();

        while (iterator.hasNext()) {
            Map.Entry<UUID, FlagPurchaseData> entry = iterator.next();
            FlagPurchaseData purchaseData = entry.getValue();

            if (currentTime > purchaseData.expirationTime) {
                Player player = plugin.getServer().getPlayer(entry.getKey());
                if (player != null && player.isOnline()) {
                    player.sendMessage(ChatColor.RED + "‚è∞ –í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –∏—Å—Ç–µ–∫–ª–æ. –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.");
                }
                iterator.remove();
            }
        }
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –Ω–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ñ–ª–∞–≥–∞–º–∏
     */
    private boolean canPlayerManageFlags(Player player, ProtectedRegion region) {
        return player.hasPermission("rgprotect.admin") ||
                region.getOwners().contains(player.getUniqueId()) ||
                region.getOwners().contains(player.getName());
    }

    /**
     * –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ü–µ–Ω—ã
     */
    private String formatPrice(double price) {
        if (price == (long) price) {
            return String.valueOf((long) price);
        } else {
            return String.valueOf(price);
        }
    }

    /**
     * –ó–∞–∫—Ä—ã—Ç–∏–µ –º–µ–Ω—é –¥–ª—è –∏–≥—Ä–æ–∫–∞
     */
    public void closeMenuForPlayer(Player player) {
        openFlagMenus.remove(player.getUniqueId());
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä–∫–∞, –æ—Ç–∫—Ä—ã—Ç–æ –ª–∏ –º–µ–Ω—é —É –∏–≥—Ä–æ–∫–∞
     */
    public boolean hasOpenMenu(Player player) {
        return openFlagMenus.containsKey(player.getUniqueId());
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ ID —Ä–µ–≥–∏–æ–Ω–∞ –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–æ–≥–æ –º–µ–Ω—é
     */
    public String getOpenMenuRegionId(Player player) {
        return openFlagMenus.get(player.getUniqueId());
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä–∫–∞, –µ—Å—Ç—å –ª–∏ –æ–∂–∏–¥–∞—é—â–∞—è –ø–æ–∫—É–ø–∫–∞ —Ñ–ª–∞–≥–∞
     */
    public boolean hasPendingFlagPurchase(Player player) {
        return pendingFlagPurchases.containsKey(player.getUniqueId());
    }

    /**
     * –û—á–∏—Å—Ç–∫–∞ –æ–∂–∏–¥–∞—é—â–µ–π –ø–æ–∫—É–ø–∫–∏
     */
    public void clearPendingFlagPurchase(Player player) {
        pendingFlagPurchases.remove(player.getUniqueId());
    }

    // –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã

    private ProtectedRegion findRegionById(String regionId) {
        for (org.bukkit.World world : plugin.getServer().getWorlds()) {
            try {
                com.sk89q.worldguard.protection.managers.RegionManager regionManager =
                        plugin.getProtectRegionManager().getWorldGuardRegionManager(world);
                if (regionManager != null) {
                    return regionManager.getRegion(regionId);
                }
            } catch (Exception e) {
                // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º
            }
        }
        return null;
    }
}